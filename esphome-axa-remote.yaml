substitutions:
  name: "esphome-axa-remote"

esphome:
  name: "$name"
  friendly_name: ESPHome - AXA Remote 2.0
  comment: ESP32-C3-MINI-1-N4 - AXA Remote 2.0 Controler
  project:
    name: "AXA_Remote_2_Controler"
    version: "2024.10.0"
  includes:
    - "AXA/espaxa.h"
  on_boot:
    priority: -10
    then:
      - uart.write: "\r\n"
      - delay: 100ms
      - uart.write: "STOP\r\n"
      - delay: 100ms
      - uart.write: "CLOSE\r\n"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
    version: latest

wifi:
  reboot_timeout: 1min
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:

web_server:
  version: 3
  port: 80

ota:
  platform: esphome
  password: !secret ota_password

api:
  reboot_timeout: 1min
  encryption:
    key: !secret api_encryption_key

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: uptime
    id: uptime_sensor
    icon: mdi:clock-start
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s
    icon: mdi:wifi

button:
  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    icon: mdi:restart-alert

  - platform: restart
    id: restart_button
    name: "Restart"
    icon: mdi:restart

text_sensor:
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start

  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address
      icon: mdi:ip
    mac_address:
      name: "MAC Address"
      icon: mdi:wifi-settings
    ssid:
      name: "SSID"
      id: ssid_address
      icon: mdi:wifi-settings
    bssid:
      name: "BSSID"
      icon: mdi:wifi-settings

logger:
  logs:
    component: ERROR

status_led:
  pin:
    number: GPIO2
    inverted: True

uart:
  tx_pin: GPIO4
  rx_pin: GPIO5
  baud_rate: 19200
  stop_bits: 2
  id: uart_bus

output:
  - platform: gpio
    pin: GPIO3
    inverted: True
    id: led_green

binary_sensor:
  - platform: gpio
    pin:
      number: 9
      inverted: true
    name: BOOT Button
    icon: mdi:radiobox-marked
    on_press:
      then:
        - light.turn_on: led_green_light
    on_release:
      then:
        - light.turn_off: led_green_light

light:
  - platform: binary
    name: "LED Green"
    id: led_green_light
    icon: mdi:led-variant-outline
    output: led_green
    internal: True

custom_component:
  - lambda: |-
      auto axa = new CustomAXA2RemoteUART(id(uart_bus));
      App.register_component(axa);
      return {axa};

text_sensor:
  - platform: custom
    lambda: |-
      auto axa = new CustomAXA2RemoteUART(id(uart_bus));
      App.register_component(axa);
      return {axa->axa_status_text};
    text_sensors:
      - name: "AXA Status"
        icon: mdi:lock
        id: axa_status_text

sensor:
  - platform: custom
    lambda: |-
      auto axa = new CustomAXA2RemoteUART(id(uart_bus));
      App.register_component(axa);
      return {axa->axa_window};
    sensors:
      - name: "Status"
        id: axa_window_status
        internal: True

cover:
  - platform: template
    name: "Raam"
    assumed_state: False
    lambda: |-
      if (id(axa_window_status).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }
    open_action:
      - logger.log: "Window open action triggered"
      - light.turn_on: led_green_light
      - uart.write: "\r"
      - delay: 0.1s
      - uart.write: "STOP\r\n"
      - delay: 0.1s
      - uart.write: "OPEN\r\n"
      - light.turn_off: led_green_light
    close_action:
      - logger.log: "Window close action triggered"
      - light.turn_on: led_green_light
      - uart.write: "\r"
      - delay: 0.1s
      - uart.write: "STOP\r\n"
      - delay: 0.1s
      - uart.write: "OPEN\r\n"
      - delay: 0.1s
      - uart.write: "CLOSE\r\n"
      - light.turn_off: led_green_light
    stop_action:
      - logger.log: "Window stop action triggered"
      - light.turn_on: led_green_light
      - uart.write: "\r"
      - delay: 0.1s
      - uart.write: "STOP\r\n"
      - light.turn_off: led_green_light
